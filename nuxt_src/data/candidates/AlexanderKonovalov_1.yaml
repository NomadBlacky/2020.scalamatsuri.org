id: 'AlexanderKonovalov_1'
ja:
  candidate:
    name: Alexander Konovalov
    twitter: alexknvl
    github: alexknvl
    icon: https://pbs.twimg.com/profile_images/797920728859480065/sCOPNuwF_400x400.jpg
    organization: Compellon, Analytics Engineer
    contributes:
      - Scalazのコントリビュータであり、チームメンバーでもあります。
    speaker_experience:
      - WWW2017において学術論文の発表をしています。 <a href='https://www.slideshare.net/AlexanderKonovalov13/learning-event-extractors-from-knowledge-base-revisions'>https://www.slideshare.net/AlexanderKonovalov13/learning-event-extractors-from-knowledge-base-revisions</a>
      - Lambdaconf 2018でも発表しましたが、Scalaz summitの合間で非公式に設定されたものだっため、十分な準備の時間を取れませんでした。 <a href='https://alexknvl.com/docs/scalaz_summit_presentation.pdf'>https://alexknvl.com/docs/scalaz_summit_presentation.pdf</a>
  program:
    title: "再帰:スキーム,代数,finally tagless,データ型. 統合されたビジョン"
    length: 90
    audience: Intermediate
    language: English
    tags:
      - Functional Programming
    suggestions:
      - Recursion Schemes(再帰スキーム)やfinally taglessエンコーディング、より汎用的な型理論について理解を深めたい人
      - Scalaにおける関数型プログラミングについて中ぐらいの理解ができており、より高度なトピックについて学びたい人
    detail: |
      このトークでは、再帰スキームやfinally taglessエンコーディングの裏にある中心的概念をゼロから導出します。

      型代数(type algebra)や同型写像(isomorphism)の簡単な紹介から始まり、そして単純な再帰的なデータ型とそれに対する様々な畳み込み(fold, foldMap, 直接的なfoldr)のような操作を通じて、final taglessや再帰スキームなどの同型写像を利用して異なる形態へと揉み込んでいく方法を学びます。

      そうすれば自然なこととして "Recursive"型クラス、代数的データ型(ADT)のBoehm-Berarducciエンコーディング、catamorphism、そしてF代数(F-algebras)へと到達することでしょう。
en:
  candidate:
    name: Alexander Konovalov
    twitter: alexknvl
    github: alexknvl
    icon: https://pbs.twimg.com/profile_images/797920728859480065/sCOPNuwF_400x400.jpg
    organization: Compellon, Analytics Engineer
    contributes:
      - I am a contributor and a team member of Scalaz.
    speaker_experience:
      - I have presented an academic paper at WWW2017, <a href='https://www.slideshare.net/AlexanderKonovalov13/learning-event-extractors-from-knowledge-base-revisions'>https://www.slideshare.net/AlexanderKonovalov13/learning-event-extractors-from-knowledge-base-revisions</a> and presented <a href='https://alexknvl.com/docs/scalaz_summit_presentation.pdf'>https://alexknvl.com/docs/scalaz_summit_presentation.pdf</a> at Lambdaconf 2018 but in an informal setting during scalaz summit and without much preparation.
  program:
    title: "Recursion: schemes, algebras, finally tagless, data types. A unifying vision."
    length: 90
    audience: Intermediate
    language: English
    tags:
      - Functional Programming
    suggestions:
      - People who want a deeper understanding of recursion schemes, finally tagless encoding, and type theory in general.
      - People who have achieved intermediate understanding of functional programming in Scala, and want to learn more advanced topics.
    detail: |
      In this talk I will derive the core ideas behind recursion schemes and finally tagless encoding starting from scratch.

      We will start with a short introduction to type algebra and isomorphisms.
      Then we will take simple recursive data types and explore various `fold`-like operations on them and how we can massage them into different forms using isomorphisms: final tagless, recursion schemes, `foldMap`-like operations, and direct `foldr`-style. We will naturally arrive at the `Recursive` typeclass, Boehm-Berarducci encoding of ADTs, catamorphisms and F-algebras.
